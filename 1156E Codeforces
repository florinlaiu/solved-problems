#include <bits/stdc++.h>

using namespace std;

struct SegmentTree {

  vector<pair<int, int>>aint;

  SegmentTree(int n = 1) {
    aint.resize(4 * n + 1);
  }

  void update(int x, int l, int r, int at, int with) {
    if(l == r) {
      aint[x] = make_pair(with, at);
      return;
    }
    int m = (l + r) >> 1;
    int lson = x << 1, rson = (x << 1) | 1;
    if(at <= m)
      update(lson, l, m, at, with);
    else
      update(rson, m + 1, r, at, with);
    aint[x] = max(aint[lson], aint[rson]);

  }

  pair<int, int>query(int x, int l, int r, int ll, int rr) {
    if(ll > r || l > rr)
      return make_pair(0, 0);

    if(l >= ll && r <= rr) {
      return aint[x];
    }

    int m = (l + r) >> 1;
    int lson = x << 1, rson = (x << 1) | 1;
    return max(query(lson, l, m, ll, rr), query(rson, m + 1, r, ll, rr));

  }
};
int main() {
#ifndef ONLINE_JUDGE
  freopen("data.in", "r", stdin);
#endif
  ios::sync_with_stdio(0);
  int n;
  cin >> n;
  SegmentTree MaxST(n);
  vector<int>p(n);
  for(int i = 0, x; i < n; ++i) {
    cin >> x;
    p[i] = x;
    MaxST.update(1, 0, n - 1, i, x);
  }

  vector<vector<int>>g(n);
  function<int(int, int)>build = [&] (int l, int r) {
    if(l > r)
      return -1;
    int now = MaxST.query(1, 0, n - 1, l, r).second;

    int st = build(l, now - 1);
    int dr = build(now + 1, r);
    if(st != -1)
      g[now].push_back(st);
    if(dr != -1)
      g[now].push_back(dr);
    return now;
  };

  build(0, n - 1);
  long long res = 0;
  vector<map<int, int>>ap(n);
  function<void(int)>dfs = [&] (int u) {
    for(auto it : g[u])dfs(it);
    if(g[u].empty()) {
      ++ap[u][p[u]];
      return;
    }
    if(g[u].size() == 1) {
      int v = g[u][0];
      swap(ap[u], ap[v]);
    } else if(g[u].size() == 2) {
      int v = g[u][0], w = g[u][1];
      if(ap[v].size() < ap[w].size())
        swap(v, w);
      swap(ap[u], ap[v]);
      map<int, int>().swap(ap[v]);
      for(auto it : ap[w]) {
        int seek = p[u] - it.first;
        if(ap[u].find(seek) != end(ap[u]))
          res += ap[u][seek];
      }
      for(auto it : ap[w])
        ap[u][it.first]++;
      map<int, int>().swap(ap[w]);
    }
    ++ap[u][p[u]];
  };
  for(int i = 0; i < n; ++i)
    if(p[i] == n)dfs(i);
  cout << res;
}
