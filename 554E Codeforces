#include <bits/stdc++.h>

using namespace std;

class Graph {
 public:
  vector<vector<int>>g;
  Graph(int n = 0) {
    g.resize(n);
  }
  void add(int x, int y) {
    assert(x < (int)g.size());
    assert(y < (int)g.size());
    assert(x >= 0 && y >= 0);
    g[x].push_back(y);
    g[y].push_back(x);
  }
  vector<int>get_euler() {
    vector<int>path;
    function<void(int)>eulerDfs = [&] (int nod) {
      while(!g[nod].empty()) {
        int vec = g[nod].back();
        g[nod].pop_back();
        g[vec].erase(find(g[vec].begin(), g[vec].end(), nod));
        eulerDfs(vec);
      }
      path.push_back(nod);
    };
    int nrOdd = 0, an_odd = 0;
    for(int i = 0; i < (int)g.size(); ++i) {
       if((int)g[i].size() % 2 == 1) {
         nrOdd++;
         an_odd = i;
       }
    }
    if(nrOdd != 0 && nrOdd != 2) {
      return {-1};
    }
    eulerDfs(an_odd);
    return path;
  }
};
int main() {
#ifndef ONLINE_JUDGE
  freopen("shiftright.in", "r", stdin);
#endif

  int n;
  cin >> n;
  n--;
  vector<int>a(n), b(n);
  vector<int>all;
  for(int i = 0; i < n; ++i) {
    cin >> a[i];
    all.push_back(a[i]);
  }
  for(int i = 0; i < n; ++i) {
    cin >> b[i];
    if(a[i] > b[i]) {
      cout << -1;
      return 0;
    }
    all.push_back(b[i]);
  }

  sort(all.begin(), all.end());
  all.resize(unique(all.begin(), all.end()) - all.begin());
  Graph G((int)all.size());
  vector<int>inv((int)all.size());
  for(int i = 0; i < n; ++i) {
    int oa = a[i], ob = b[i];
    a[i] = lower_bound(all.begin(), all.end(), a[i]) - all.begin();
    b[i] = lower_bound(all.begin(), all.end(), b[i]) - all.begin();
    inv[a[i]] = oa;
    inv[b[i]] = ob;
    G.add(a[i], b[i]);
  }

  vector<int>sol = G.get_euler();
  if(sol[0] == -1 || (int)sol.size() != n+1) {
    cout << -1;
    return 0;
  }
  for(int u : sol)
    cout << inv[u] << ' ';
}
